// vanet simulator interfaces
// this module serve as simulator as well as a central authority

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: pb/framework.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExperimentType int32

const (
	ExperimentType_BASELINE ExperimentType = 0
	ExperimentType_PROPOSAL ExperimentType = 1
)

// Enum value maps for ExperimentType.
var (
	ExperimentType_name = map[int32]string{
		0: "BASELINE",
		1: "PROPOSAL",
	}
	ExperimentType_value = map[string]int32{
		"BASELINE": 0,
		"PROPOSAL": 1,
	}
)

func (x ExperimentType) Enum() *ExperimentType {
	p := new(ExperimentType)
	*p = x
	return p
}

func (x ExperimentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExperimentType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_framework_proto_enumTypes[0].Descriptor()
}

func (ExperimentType) Type() protoreflect.EnumType {
	return &file_pb_framework_proto_enumTypes[0]
}

func (x ExperimentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExperimentType.Descriptor instead.
func (ExperimentType) EnumDescriptor() ([]byte, []int) {
	return file_pb_framework_proto_rawDescGZIP(), []int{0}
}

type MetricsType int32

const (
	MetricsType_TruePositive  MetricsType = 0
	MetricsType_TrueNegative  MetricsType = 1
	MetricsType_FalsePositive MetricsType = 2
	MetricsType_FalseNegative MetricsType = 3
	MetricsType_Recall        MetricsType = 4
	MetricsType_Precision     MetricsType = 5
	MetricsType_F1Score       MetricsType = 6
	MetricsType_Accuracy      MetricsType = 7
)

// Enum value maps for MetricsType.
var (
	MetricsType_name = map[int32]string{
		0: "TruePositive",
		1: "TrueNegative",
		2: "FalsePositive",
		3: "FalseNegative",
		4: "Recall",
		5: "Precision",
		6: "F1Score",
		7: "Accuracy",
	}
	MetricsType_value = map[string]int32{
		"TruePositive":  0,
		"TrueNegative":  1,
		"FalsePositive": 2,
		"FalseNegative": 3,
		"Recall":        4,
		"Precision":     5,
		"F1Score":       6,
		"Accuracy":      7,
	}
)

func (x MetricsType) Enum() *MetricsType {
	p := new(MetricsType)
	*p = x
	return p
}

func (x MetricsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_framework_proto_enumTypes[1].Descriptor()
}

func (MetricsType) Type() protoreflect.EnumType {
	return &file_pb_framework_proto_enumTypes[1]
}

func (x MetricsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsType.Descriptor instead.
func (MetricsType) EnumDescriptor() ([]byte, []int) {
	return file_pb_framework_proto_rawDescGZIP(), []int{1}
}

type StatisticsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint32                     `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Bundle            []*StatisticsPerExperiment `protobuf:"bytes,2,rep,name=bundle,proto3" json:"bundle,omitempty"`
	ActiveVehicleNums int32                      `protobuf:"varint,3,opt,name=activeVehicleNums,proto3" json:"activeVehicleNums,omitempty"`
}

func (x *StatisticsBundle) Reset() {
	*x = StatisticsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_framework_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsBundle) ProtoMessage() {}

func (x *StatisticsBundle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_framework_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsBundle.ProtoReflect.Descriptor instead.
func (*StatisticsBundle) Descriptor() ([]byte, []int) {
	return file_pb_framework_proto_rawDescGZIP(), []int{0}
}

func (x *StatisticsBundle) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StatisticsBundle) GetBundle() []*StatisticsPerExperiment {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *StatisticsBundle) GetActiveVehicleNums() int32 {
	if x != nil {
		return x.ActiveVehicleNums
	}
	return 0
}

type StatisticsPerExperiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// experiment name & type
	Name string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ExperimentType `protobuf:"varint,2,opt,name=type,proto3,enum=rpc.pb.ExperimentType" json:"type,omitempty"` // 0: baseline, 1: proposal
	// concrete experiment results
	Epoch     uint32  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Tp        float32 `protobuf:"fixed32,10,opt,name=tp,proto3" json:"tp,omitempty"`
	Fp        float32 `protobuf:"fixed32,11,opt,name=fp,proto3" json:"fp,omitempty"`
	Tn        float32 `protobuf:"fixed32,12,opt,name=tn,proto3" json:"tn,omitempty"`
	Fn        float32 `protobuf:"fixed32,13,opt,name=fn,proto3" json:"fn,omitempty"`
	Recall    float32 `protobuf:"fixed32,14,opt,name=recall,proto3" json:"recall,omitempty"`
	Precision float32 `protobuf:"fixed32,15,opt,name=precision,proto3" json:"precision,omitempty"`
	F1Score   float32 `protobuf:"fixed32,16,opt,name=f1score,proto3" json:"f1score,omitempty"`
	Acc       float32 `protobuf:"fixed32,17,opt,name=acc,proto3" json:"acc,omitempty"`
}

func (x *StatisticsPerExperiment) Reset() {
	*x = StatisticsPerExperiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_framework_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsPerExperiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsPerExperiment) ProtoMessage() {}

func (x *StatisticsPerExperiment) ProtoReflect() protoreflect.Message {
	mi := &file_pb_framework_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsPerExperiment.ProtoReflect.Descriptor instead.
func (*StatisticsPerExperiment) Descriptor() ([]byte, []int) {
	return file_pb_framework_proto_rawDescGZIP(), []int{1}
}

func (x *StatisticsPerExperiment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatisticsPerExperiment) GetType() ExperimentType {
	if x != nil {
		return x.Type
	}
	return ExperimentType_BASELINE
}

func (x *StatisticsPerExperiment) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StatisticsPerExperiment) GetTp() float32 {
	if x != nil {
		return x.Tp
	}
	return 0
}

func (x *StatisticsPerExperiment) GetFp() float32 {
	if x != nil {
		return x.Fp
	}
	return 0
}

func (x *StatisticsPerExperiment) GetTn() float32 {
	if x != nil {
		return x.Tn
	}
	return 0
}

func (x *StatisticsPerExperiment) GetFn() float32 {
	if x != nil {
		return x.Fn
	}
	return 0
}

func (x *StatisticsPerExperiment) GetRecall() float32 {
	if x != nil {
		return x.Recall
	}
	return 0
}

func (x *StatisticsPerExperiment) GetPrecision() float32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *StatisticsPerExperiment) GetF1Score() float32 {
	if x != nil {
		return x.F1Score
	}
	return 0
}

func (x *StatisticsPerExperiment) GetAcc() float32 {
	if x != nil {
		return x.Acc
	}
	return 0
}

type QueryEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch uint32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *QueryEpoch) Reset() {
	*x = QueryEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_framework_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEpoch) ProtoMessage() {}

func (x *QueryEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_pb_framework_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEpoch.ProtoReflect.Descriptor instead.
func (*QueryEpoch) Descriptor() ([]byte, []int) {
	return file_pb_framework_proto_rawDescGZIP(), []int{2}
}

func (x *QueryEpoch) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

var File_pb_framework_proto protoreflect.FileDescriptor

var file_pb_framework_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x74, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x74, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x66,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x66, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x31, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x66, 0x31, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x63, 0x63, 0x22, 0x22, 0x0a,
	0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x2a, 0x2c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x01, 0x2a,
	0x8d, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x10, 0x07, 0x32,
	0xb7, 0x02, 0x0a, 0x18, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x7d,
	0x12, 0x57, 0x0a, 0x09, 0x45, 0x63, 0x68, 0x6f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x1a, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x63, 0x68,
	0x6f, 0x2f, 0x7b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x7d, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x32, 0x72, 0x6e, 0x2f, 0x69,
	0x62, 0x2d, 0x64, 0x74, 0x6d, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_framework_proto_rawDescOnce sync.Once
	file_pb_framework_proto_rawDescData = file_pb_framework_proto_rawDesc
)

func file_pb_framework_proto_rawDescGZIP() []byte {
	file_pb_framework_proto_rawDescOnce.Do(func() {
		file_pb_framework_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_framework_proto_rawDescData)
	})
	return file_pb_framework_proto_rawDescData
}

var file_pb_framework_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_framework_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pb_framework_proto_goTypes = []interface{}{
	(ExperimentType)(0),             // 0: rpc.pb.ExperimentType
	(MetricsType)(0),                // 1: rpc.pb.MetricsType
	(*StatisticsBundle)(nil),        // 2: rpc.pb.StatisticsBundle
	(*StatisticsPerExperiment)(nil), // 3: rpc.pb.StatisticsPerExperiment
	(*QueryEpoch)(nil),              // 4: rpc.pb.QueryEpoch
	(*emptypb.Empty)(nil),           // 5: google.protobuf.Empty
}
var file_pb_framework_proto_depIdxs = []int32{
	3, // 0: rpc.pb.StatisticsBundle.bundle:type_name -> rpc.pb.StatisticsPerExperiment
	0, // 1: rpc.pb.StatisticsPerExperiment.type:type_name -> rpc.pb.ExperimentType
	5, // 2: rpc.pb.FrameworkStatisticsQuery.GetLatestData:input_type -> google.protobuf.Empty
	4, // 3: rpc.pb.FrameworkStatisticsQuery.GetDataForEpoch:input_type -> rpc.pb.QueryEpoch
	4, // 4: rpc.pb.FrameworkStatisticsQuery.EchoEpoch:input_type -> rpc.pb.QueryEpoch
	2, // 5: rpc.pb.FrameworkStatisticsQuery.GetLatestData:output_type -> rpc.pb.StatisticsBundle
	2, // 6: rpc.pb.FrameworkStatisticsQuery.GetDataForEpoch:output_type -> rpc.pb.StatisticsBundle
	4, // 7: rpc.pb.FrameworkStatisticsQuery.EchoEpoch:output_type -> rpc.pb.QueryEpoch
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pb_framework_proto_init() }
func file_pb_framework_proto_init() {
	if File_pb_framework_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_framework_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_framework_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsPerExperiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_framework_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_framework_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_framework_proto_goTypes,
		DependencyIndexes: file_pb_framework_proto_depIdxs,
		EnumInfos:         file_pb_framework_proto_enumTypes,
		MessageInfos:      file_pb_framework_proto_msgTypes,
	}.Build()
	File_pb_framework_proto = out.File
	file_pb_framework_proto_rawDesc = nil
	file_pb_framework_proto_goTypes = nil
	file_pb_framework_proto_depIdxs = nil
}
